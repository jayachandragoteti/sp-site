"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ChildProcess = __importStar(require("child_process"));
const fs_1 = require("fs");
const FG = __importStar(require("fast-glob"));
const Path = __importStar(require("path"));
const util_1 = require("util");
const transforms_1 = require("./lib/transforms");
const exec = util_1.promisify(ChildProcess.exec);
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
async function transform(options, transformer) {
    for await (let file of FG.stream(options.files, {
        cwd: options.cwd,
        dot: true,
    })) {
        if (file instanceof Buffer) {
            file = file.toString("utf8");
        }
        const filePath = Path.resolve(options.cwd, file);
        const fileSource = fs_1.createReadStream(filePath, { encoding: "utf8" });
        const filterResults = await new Promise((resolve, reject) => {
            const filter = new transformer(options);
            const result = [];
            filter.on("data", (data) => {
                result.push(data.toString());
            });
            filter.on("end", () => {
                resolve(result);
            });
            filter.on("error", () => {
                reject();
            });
            fileSource.on("end", () => {
                filter.end();
            });
            fileSource.pipe(filter);
        });
        if (filterResults.length) {
            const fileSink = fs_1.createWriteStream(filePath, { encoding: "utf8" });
            fileSink.write(filterResults.join(""));
            fileSink.end();
        }
    }
}
//= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
exports.cleanFiles = (options) => transform(options, transforms_1.IncludesFilterClean);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * @deprecated Don't use this or the smudge / clean filters: they don't play nicely.  Instead rely only on the NPM postinstall or prepare operations.
 */
async function installGitHooks() {
    await exec(`git config filter.ignoreProcessor.clean 'npx -q cross-env NODE_NO_WARNINGS=1 npx -q ts-node --project tsconfig.production.json util/ignoreClean.ts'`);
    await exec(`git config filter.ignoreProcessor.smudge 'npx -q cross-env NODE_NO_WARNINGS=1 npx -q ts-node --project tsconfig.production.json util/ignoreSmudge.ts'`);
    await exec(`git config filter.ignoreProcessor.required true`);
}
exports.installGitHooks = installGitHooks;
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
exports.transformFiles = (options) => transform(options, transforms_1.IncludesFilterSmudge);
