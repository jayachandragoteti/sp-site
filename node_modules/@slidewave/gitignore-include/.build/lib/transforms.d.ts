/// <reference types="node" />
import { Transform, TransformCallback } from "stream";
export declare enum ErrorHandling {
    embedAsComments = "embedAsComments",
    throwImmediate = "throwImmediate"
}
export interface IncludesFilterSmudgeOptions {
    errorHandling?: ErrorHandling;
}
export declare class IncludesFilter extends Transform {
    protected _errorHandling: ErrorHandling;
    constructor(options?: IncludesFilterSmudgeOptions);
}
/** Transforms a stream removing all the contents between the include tags. */
export declare class IncludesFilterClean extends IncludesFilter {
    constructor(options?: IncludesFilterSmudgeOptions);
    _transform(chunk: Buffer | string, _encoding: string, callback: TransformCallback): void;
}
/** Transforms a stream replacing all the contents between the include tags with updated content from the given URL. Fetch errors are by default embedded in the steam as comments. */
export declare class IncludesFilterSmudge extends IncludesFilter {
    constructor(options?: IncludesFilterSmudgeOptions);
    _transform(chunk: Buffer | string, _encoding: string, callback: TransformCallback): void;
}
